# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module SwaggerPetstore
  class UserController < BaseController
    @@instance = UserController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Creates list of users with given input array
    # @param [List of User] body Required parameter: List of user object
    # @return void response from the API call
    def create_users_with_array_input(body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/createWithArray'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 500
        raise APIException.new 'successful operation', _context
      end
      validate_response(_context)
    end

    # Creates list of users with given input array
    # @param [List of User] body Required parameter: List of user object
    # @return void response from the API call
    def create_users_with_list_input(body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/createWithList'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 500
        raise APIException.new 'successful operation', _context
      end
      validate_response(_context)
    end

    # Create user
    # @param [User] body Required parameter: Created user object
    # @return void response from the API call
    def create_user(body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 500
        raise APIException.new 'successful operation', _context
      end
      validate_response(_context)
    end

    # Logs user into the system
    # @param [String] username Required parameter: The user name for login
    # @param [String] password Required parameter: The password for login in clear text
    # @return String response from the API call
    def get_login_user(username, 
                       password)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/login'
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'username' => username,
        'password' => password
      }, array_serialization: Configuration.array_serialization
      _query_url = APIHelper.clean_url _query_builder

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid username/password supplied', _context
      end
      validate_response(_context)

      # return appropriate response type
      return _context.response.raw_body
    end

    # Logs out current logged in user session
    # @return void response from the API call
    def get_logout_user

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/logout'
      _query_url = APIHelper.clean_url _query_builder

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 500
        raise APIException.new 'successful operation', _context
      end
      validate_response(_context)
    end

    # Get user by user name
    # @param [String] username Required parameter: The name that needs to be fetched. Use user1 for testing.
    # @return User response from the API call
    def get_user_by_name(username)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/{username}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'username' => username
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid username supplied', _context
      elsif _context.response.status_code == 404
        raise APIException.new 'User not found', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return User.from_hash(decoded)
    end

    # Updated user
    # @param [String] username Required parameter: name that need to be updated
    # @param [User] body Required parameter: Updated user object
    # @return void response from the API call
    def update_user(username, 
                    body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/{username}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'username' => username
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: body.to_json
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid user supplied', _context
      elsif _context.response.status_code == 404
        raise APIException.new 'User not found', _context
      end
      validate_response(_context)
    end

    # Delete user
    # @param [String] username Required parameter: The name that needs to be deleted
    # @return void response from the API call
    def delete_user(username)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/user/{username}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'username' => username
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid username supplied', _context
      elsif _context.response.status_code == 404
        raise APIException.new 'User not found', _context
      end
      validate_response(_context)
    end
  end
end
