# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module SwaggerPetstore
  class StoreController < BaseController
    @@instance = StoreController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Returns pet inventories by status
    # @return Mixed response from the API call
    def get_inventory

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/store/inventory'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      OAuth2.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body) if not (_context.response.raw_body.nil? or _context.response.raw_body.to_s.strip.empty?)
      return decoded
    end

    # Delete purchase order by ID
    # @param [Long] order_id Required parameter: ID of the order that needs to be deleted
    # @return void response from the API call
    def delete_order(order_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/store/order/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'orderId' => order_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid ID supplied', _context
      elsif _context.response.status_code == 404
        raise APIException.new 'Order not found', _context
      end
      validate_response(_context)
    end

    # Place an order for a pet
    # @param [Order] body Required parameter: order placed for purchasing the pet
    # @return Order response from the API call
    def create_place_order(body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/store/order'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid Order', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Order.from_hash(decoded)
    end

    # Find purchase order by ID
    # @param [Long] order_id Required parameter: ID of pet that needs to be fetched
    # @return Order response from the API call
    def get_order_by_id(order_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/store/order/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'orderId' => order_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 400
        raise APIException.new 'Invalid ID supplied', _context
      elsif _context.response.status_code == 404
        raise APIException.new 'Order not found', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return Order.from_hash(decoded)
    end
  end
end
